pipeline {
    agent any

    stages {
        stage('Install frontend dependencies') {
            steps {
                dir('piFrontEnd') {
                    sh 'npm install'
                }
            }
        }

        stage('Install backend dependencies') {
            steps {
                dir('piBackEnd') {
                    sh 'npm install'
                }
            }
        }

        stage('Unit Test') {
            steps {
                parallel (
                    frontend: {
                        dir('piFrontEnd') {
                            sh 'npm test || true'  // Ensures that the stage doesn't fail if no tests are specified
                        }
                    },
                    backend: {
                        dir('piBackEnd') {
                            sh 'npm test || true'  // Same here for the backend
                        }
                    }
                )
            }
        }

        stage('Build frontend') {
            steps {
                dir('piFrontEnd') {
                    sh 'npm run build'
                }
            }
        }

        stage('Build backend') {
            steps {
                dir('piBackEnd') {
                    // If needed, use the correct build command for backend
                    sh 'npm run build'  // Example if backend has a build script
                    // or if you only want to start the backend:
                    // sh 'npm run start'
                }
            }
        }

        stage('SonarQube Analysis (Frontend)') {
            steps {
                dir('piFrontEnd') {
                    script {
                        def scannerHome = tool name: 'SonarScanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                        withSonarQubeEnv('SonarQube') {
                            sh "${scannerHome}/bin/sonar-scanner"
                        }
                    }
                }
            }
        }

        stage('SonarQube Analysis (Backend)') {
            steps {
                dir('piBackEnd') {
                    script {
                        def scannerHome = tool name: 'SonarScanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                        withSonarQubeEnv('SonarQube') {
                            sh "${scannerHome}/bin/sonar-scanner"
                        }
                    }
                }
            }
        }
    }
}
